package com.seismic.crm.model;

// Generated Jan 3, 2014 9:30:19 PM by Hibernate Tools 4.0.0

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import com.fasterxml.jackson.annotation.JsonManagedReference;


/**
 * SoSpecQuestion generated by hbm2java
 */
@Entity
@Table(name = "SoSpecQuestion", schema = "dbo", catalog = "SEISMIC_CRM_DEV")
public class SoSpecQuestion implements java.io.Serializable {

	private long questionId;
	private ProductCategory productCategory;
	private String questionName;
	private Integer questionSeq;
	private Boolean isActive;
	private String createdBy;
	private Date createdAt;
	private String modifiedBy;
	private String modifiedAt;
	private String remarks;
	private Set<SoSpecTask> soSpecTasks = new LinkedHashSet(0);
	private Set<SoSpecQuestionResponse> soSpecQuestionResponses = new LinkedHashSet(0);
//	private String soSpecQuestionResponse;
//	private Long questionResponseId;
//	private String taskNames;
//	private String taskIds;

	public SoSpecQuestion() {
	}

	public SoSpecQuestion(long questionId) {
		this.questionId = questionId;
	}

	public SoSpecQuestion(long questionId, ProductCategory productCategory,
			String questionName, Integer questionSeq, Boolean isActive,
			String createdBy, Date createdAt, String modifiedBy,
			String modifiedAt, String remarks, Set<SoSpecTask> soSpecTasks,
			Set<SoSpecQuestionResponse> soSpecQuestionResponses) {
		this.questionId = questionId;
		this.productCategory = productCategory;
		this.questionName = questionName;
		this.questionSeq = questionSeq;
		this.isActive = isActive;
		this.createdBy = createdBy;
		this.createdAt = createdAt;
		this.modifiedBy = modifiedBy;
		this.modifiedAt = modifiedAt;
		this.remarks = remarks;
		this.soSpecTasks = soSpecTasks;
		this.soSpecQuestionResponses = soSpecQuestionResponses;
	}

	@Id
	@GeneratedValue
	@Column(name = "QuestionID", unique = true, nullable = false)
	public long getQuestionId() {
		return this.questionId;
	}

	public void setQuestionId(long questionId) {
		this.questionId = questionId;
	}

	@JsonManagedReference
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ProductCategoryID")
	public ProductCategory getProductCategory() {
		return this.productCategory;
	}

	public void setProductCategory(ProductCategory productCategory) {
		this.productCategory = productCategory;
	}

	@Column(name = "QuestionName")
	public String getQuestionName() {
		return this.questionName;
	}

	public void setQuestionName(String questionName) {
		this.questionName = questionName;
	}

	@Column(name = "QuestionSeq")
	public Integer getQuestionSeq() {
		return this.questionSeq;
	}

	public void setQuestionSeq(Integer questionSeq) {
		this.questionSeq = questionSeq;
	}

	@Column(name = "IsActive")
	public Boolean getIsActive() {
		return this.isActive;
	}

	public void setIsActive(Boolean isActive) {
		this.isActive = isActive;
	}

	@Column(name = "CreatedBy")
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CreatedAt", length = 23)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Column(name = "ModifiedBy")
	public String getModifiedBy() {
		return this.modifiedBy;
	}

	public void setModifiedBy(String modifiedBy) {
		this.modifiedBy = modifiedBy;
	}

	@Column(name = "ModifiedAt")
	public String getModifiedAt() {
		return this.modifiedAt;
	}

	public void setModifiedAt(String modifiedAt) {
		this.modifiedAt = modifiedAt;
	}

	@Column(name = "Remarks")
	public String getRemarks() {
		return this.remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	@JsonManagedReference
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "soSpecQuestion")
	public Set<SoSpecTask> getSoSpecTasks() {
		return this.soSpecTasks;
	}

	public void setSoSpecTasks(Set<SoSpecTask> soSpecTasks) {
		this.soSpecTasks = soSpecTasks;
	}

	@JsonManagedReference
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "soSpecQuestion")
	public Set<SoSpecQuestionResponse> getSoSpecQuestionResponses() {
		return this.soSpecQuestionResponses;
	}

	public void setSoSpecQuestionResponses(Set<SoSpecQuestionResponse> soSpecQuestionResponses) {
		this.soSpecQuestionResponses = soSpecQuestionResponses;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + (int) (questionId ^ (questionId >>> 32));
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof SoSpecQuestion))
			return false;
		SoSpecQuestion other = (SoSpecQuestion) obj;
		if (questionId != other.questionId)
			return false;
		return true;
	}

////	@JsonBackReference
//	@Transient
//	public String getSoSpecQuestionResponse() {
//		if(soSpecQuestionResponses.isEmpty()){
//			return null;
//		}
//		return this.soSpecQuestionResponses.iterator().next().toString();
//	}
//
//	@Transient
//	public Long getQuestionResponseId() {
//		if(soSpecQuestionResponses.isEmpty()){
//			return null;
//		}
//		return ((SoSpecQuestionResponse)this.soSpecQuestionResponses.iterator().next()).getQuestionResponseId();
//	}
//	
//	@Transient
//	public String getTaskNames() {
//		String names = "";
//		if(soSpecQuestionResponses.isEmpty()){
//			return null;
//		}
//		
//		SoSpecQuestionResponse quesResponse = ((SoSpecQuestionResponse)this.soSpecQuestionResponses.iterator().next());
//		if(quesResponse == null){
//			return null;
//		}
//		
//		Set<SoSpecTaskResponse> taskResponses = quesResponse.getSoSpecTaskResponses();
//		for(SoSpecTaskResponse item:taskResponses){
//			names = names + "&#8226; " + item.getSoSpecTask().getTaskName() + "<br><br>";
//		}
//		return names;
//	}
//
//	@Transient
//	public String getTaskIds() {
//		List<Long> arrTaskIds = new ArrayList<Long>();
//		if(soSpecQuestionResponses.isEmpty()){
//			return null;
//		}
//		
//		SoSpecQuestionResponse quesResponse = ((SoSpecQuestionResponse)this.soSpecQuestionResponses.iterator().next());
//		if(quesResponse == null){
//			return null;
//		}
//		
//		Set<SoSpecTaskResponse> taskResponses = quesResponse.getSoSpecTaskResponses();		
//		for(SoSpecTaskResponse item:taskResponses){
//			arrTaskIds.add(item.getSoSpecTask().getTaskId());
//		}
//		return arrTaskIds.toString();
//	}

}
