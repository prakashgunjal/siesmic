package com.seismic.crm.model;

// Generated Nov 8, 2013 12:48:36 PM by Hibernate Tools 4.0.0

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;

/**
 * Account generated by hbm2java
 */
@Entity
@Table(name = "Account", schema = "dbo", catalog = "Seismic_Crm_Dev")
public class Account implements java.io.Serializable {

	private Long accountId;	
	//private String accountTypeId;
	private String accountName;
	private String accountContactReferred;
	private String accountPId;
//	private String accountStatus;
	private String accountRating;
	private String accountNumber;
	private String alternateAccountNumber;
	private BigDecimal accountCreditLimiit;
	private String accountSource;
	private String bankName;
	private String bankAccountName;
	private String bankAccountSortCode;
	private String bankAccountNumber;
	private String bankAddress1;
	private String bankAddress2;
	private String bankAddress3;
	private String bankPostCode;	
	private Long salesRepId;

	private String position;
//	private String primaryContactName;
	private Contact contactByPrimaryContactName;
	private String primaryTelephoneNumber;
	private String primaryEmailId;
	private String billingContactName;
	private String billingTelephoneNumber;
	private String billingContactEmailId;
	private String billingName;
	private String billingAddress1;
	private String billingAddress2;
	private String billingAddress3;
	private String billingPostCode;
	private String companyAddress1;
	private String companyAddress2;
	private String companyAddress3;
	private String companyPostCode;
	private String ownership;
	private String telephone;
	private String otherPhone;
	private String emailId;
	private String alternateEmailId;
	private String salesTeamId;
		
	private String revenue;	
	private Float discount;
	private String stockExchange;
	private String ticker; 
	private Boolean doNotCall;
	private Boolean doNoTEmail;
	private Boolean doNotSms;
			
	private String image;
	private String webSite;
	private Boolean isActive;
	private String createdBy;
	private Date createdAt;
	private String modifiedBy;
	private Date modifiedAt;
	private String remarks;
	private Set salesOrders = new HashSet(0);
	
	private Set contacts = new HashSet(0);
	private ListValues listValuesByAccountSourceId;
	private ListValues listValuesByAccountTypeId;	
	private ListValues listValuesByStatusId;	
	private ContactGroup contactGroup;
	
	private Account parentAccount; 
	private Set leads = new HashSet(0);
	
	private ListValues listValuesByIndustryTypeId;
	private String accountRegistrationNumber;
	private java.sql.Date accountRegistrationDate;
	private Integer accountNoOfEmployees;
	private String accountLinkedInLink;
	private String accountFaceBookLink;
	private Contact contact;
	
	private String primaryContactName;
	private Contact primaryContactId;
	
	public Account() {
	}

	public Account(Long accountId) {
		this.accountId = accountId;
	}
	public Account(Long accountId, String accountTypeId, String accountName,
			String accountContactReferred, String accountPId,
			String accountStatus, String accountRating, String accountNumber,
			String alternateAccountNumber, BigDecimal accountCreditLimiit,
			String accountSource, String bankName, String bankAccountName,
			String bankAccountSortCode, String bankAccountNumber,
			String bankAddress1, String bankAddress2, String bankAddress3,
			String bankPostCode, Long salesRepId,
			String position, Contact contactByPrimaryContactName,
			String primaryTelephoneNumber, String primaryEmailId,
			String billingContactName, String billingTelephoneNumber,
			String billingContactEmailId, String billingName,
			String billingAddress1, String billingAddress2,
			String billingAddress3, String billingPostCode,
			String companyAddress1, String companyAddress2,
			String companyAddress3, String companyPostCode, String ownership,
			String telephone, String otherPhone, String emailId,
			String alternateEmailId, String revenue, Float discount,
			String stockExchange, String ticker, Boolean doNotCall,
			Boolean doNoTEmail, Boolean doNotSms, String image, String webSite,
			Boolean isActive, String createdBy, Date createdAt,
			String modifiedBy, Date modifiedAt, String remarks,
			Set salesOrders, Set contacts, Set leads,
			ListValues listValuesByAccountSourceId,
			ListValues listValuesByAccountTypeId,String salesTeamId,
			ListValues listValuesByStatusId,ContactGroup contactGroup,
			String accountRegistrationNumber,String accountLinkedInLink, String accountFaceBookLink, java.sql.Date accountRegistrationDate,
			Integer accountNoOfEmployees,Contact contact,Account parentAccount
			) { 
		super();
		this.accountId = accountId;
	//	this.accountTypeId = accountTypeId;
		this.accountName = accountName;
		this.accountContactReferred = accountContactReferred;
		this.accountPId = accountPId;
	//	this.accountStatus = accountStatus;
		this.accountRating = accountRating;
		this.accountNumber = accountNumber;
		this.alternateAccountNumber = alternateAccountNumber;
		this.accountCreditLimiit = accountCreditLimiit;
		this.accountSource = accountSource;
		this.bankName = bankName;
		this.bankAccountName = bankAccountName;
		this.bankAccountSortCode = bankAccountSortCode;
		this.bankAccountNumber = bankAccountNumber;
		this.bankAddress1 = bankAddress1;
		this.bankAddress2 = bankAddress2;
		this.bankAddress3 = bankAddress3;
		this.bankPostCode = bankPostCode;
		//this.salesTeam = salesTeam;
		this.salesRepId = salesRepId;
		this.position = position;
		this.contactByPrimaryContactName = contactByPrimaryContactName;
		this.primaryTelephoneNumber = primaryTelephoneNumber;
		this.primaryEmailId = primaryEmailId;
		this.billingContactName = billingContactName;
		this.billingTelephoneNumber = billingTelephoneNumber;
		this.billingContactEmailId = billingContactEmailId;
		this.billingName = billingName;
		this.billingAddress1 = billingAddress1;
		this.billingAddress2 = billingAddress2;
		this.billingAddress3 = billingAddress3;
		this.billingPostCode = billingPostCode;
		this.companyAddress1 = companyAddress1;
		this.companyAddress2 = companyAddress2;
		this.companyAddress3 = companyAddress3;
		this.companyPostCode = companyPostCode;
		this.ownership = ownership;
		this.telephone = telephone;
		this.otherPhone = otherPhone;
		this.emailId = emailId;
		this.alternateEmailId = alternateEmailId;
		this.revenue = revenue;
		this.discount = discount;
		this.stockExchange = stockExchange;
		this.ticker = ticker;
		this.doNotCall = doNotCall;
		this.doNoTEmail = doNoTEmail;
		this.doNotSms = doNotSms;
		this.image = image;
		this.webSite = webSite;
		this.isActive = isActive;
		this.createdBy = createdBy;
		this.createdAt = createdAt;
		this.modifiedBy = modifiedBy;
		this.modifiedAt = modifiedAt;
		this.remarks = remarks;
		this.salesOrders = salesOrders;
		this.leads = leads;
		this.contacts = contacts;
		this.listValuesByAccountSourceId = listValuesByAccountSourceId;
		this.listValuesByAccountTypeId = listValuesByAccountTypeId;
		this.listValuesByStatusId = listValuesByStatusId;
		this.salesTeamId = salesTeamId;
		this.contactGroup=contactGroup; 
		this.accountRegistrationNumber = accountRegistrationNumber;
		this.accountRegistrationDate = accountRegistrationDate;
		this.accountNoOfEmployees = accountNoOfEmployees;
		this.accountLinkedInLink = accountLinkedInLink;
		this.accountFaceBookLink = accountFaceBookLink;
		this.contact = contact;
		this.parentAccount = parentAccount;
		
	}
   
	public Account(Long accountId, String accountTypeId, String accountName,
			String accountContactReferred, String accountPId,
			String accountStatus, String accountRating, String accountNumber,
			String alternateAccountNumber, BigDecimal accountCreditLimiit,
			String accountSource, String bankName, String bankAccountName,
			String bankAccountSortCode, String bankAccountNumber,
			String bankAddress1, String bankAddress2, String bankAddress3,
			String bankPostCode,  Long salesRepId,
			String position, Contact contactByPrimaryContactName,
			String primaryTelephoneNumber, String primaryEmailId,
			String billingContactName, String billingTelephoneNumber,
			String billingContactEmailId, String billingName,
			String billingAddress1, String billingAddress2,
			String billingAddress3, String billingPostCode,
			String companyAddress1, String companyAddress2,
			String companyAddress3, String companyPostCode, String ownership,
			String telephone, String otherPhone, String emailId,
			String alternateEmailId, String image, String webSite,
			Boolean isActive, String createdBy, Date createdAt,
			String modifiedBy, Date modifiedAt, String remarks,
			Set salesOrders, Set accountContacts, Set addresses, Set invoices,
			Set opportunities, Set contacts,
			ListValues listValuesByAccountSourceId,
			ListValues listValuesByAccountTypeId,String salesTeamId,
			ListValues listValuesByStatusId,ContactGroup contactGroup,
			String accountRegistrationNumber,String accountLinkedInLink, String accountFaceBookLink, java.sql.Date accountRegistrationDate,
			Integer accountNoOfEmployees,Contact contact,Account parentAccount) {
		this.accountId = accountId;
		//this.accountTypeId = accountTypeId;
		this.accountName = accountName;
		this.accountContactReferred = accountContactReferred;
		this.accountPId = accountPId;
	//	this.accountStatus = accountStatus;
		this.accountRating = accountRating;
		this.accountNumber = accountNumber;
		this.alternateAccountNumber = alternateAccountNumber;
		this.accountCreditLimiit = accountCreditLimiit;
		this.accountSource = accountSource;
		this.bankName = bankName;
		this.bankAccountName = bankAccountName;
		this.bankAccountSortCode = bankAccountSortCode;
		this.bankAccountNumber = bankAccountNumber;
		this.bankAddress1 = bankAddress1;
		this.bankAddress2 = bankAddress2;
		this.bankAddress3 = bankAddress3;
		this.bankPostCode = bankPostCode;
	//	this.salesTeam = salesTeam;
		this.salesRepId = salesRepId;
		this.position = position;
		this.contactByPrimaryContactName = contactByPrimaryContactName;
		this.primaryTelephoneNumber = primaryTelephoneNumber;
		this.primaryEmailId = primaryEmailId;
		this.billingContactName = billingContactName;
		this.billingTelephoneNumber = billingTelephoneNumber;
		this.billingContactEmailId = billingContactEmailId;
		this.billingName = billingName;
		this.billingAddress1 = billingAddress1;
		this.billingAddress2 = billingAddress2;
		this.billingAddress3 = billingAddress3;
		this.billingPostCode = billingPostCode;
		this.companyAddress1 = companyAddress1;
		this.companyAddress2 = companyAddress2;
		this.companyAddress3 = companyAddress3;
		this.companyPostCode = companyPostCode;
		this.ownership = ownership;
		this.telephone = telephone;
		this.otherPhone = otherPhone;
		this.emailId = emailId;
		this.alternateEmailId = alternateEmailId;
		this.image = image;
		this.webSite = webSite;
		this.isActive = isActive;
		this.createdBy = createdBy;
		this.createdAt = createdAt;
		this.modifiedBy = modifiedBy;
		this.modifiedAt = modifiedAt;
		this.remarks = remarks;
		this.salesOrders = salesOrders;
		this.listValuesByAccountSourceId = listValuesByAccountSourceId;
		this.listValuesByAccountTypeId = listValuesByAccountTypeId;
		this.listValuesByStatusId = listValuesByStatusId;
		/*
		 * this.accountContacts = accountContacts; this.addresses = addresses;
		 * this.invoices = invoices; this.opportunities = opportunities;
		 */
		this.contacts = contacts;
		this.salesTeamId = salesTeamId;
		this.contactGroup=contactGroup; 
		this.accountRegistrationNumber = accountRegistrationNumber;
		this.accountRegistrationDate = accountRegistrationDate;
		this.accountNoOfEmployees = accountNoOfEmployees;
		this.accountLinkedInLink = accountLinkedInLink;
		this.accountFaceBookLink = accountFaceBookLink;
		this.contact = contact;
		this.parentAccount = parentAccount;
	}    

	@Id
	@GeneratedValue
	@Column(name = "AccountID", unique = true, nullable = false)
	public Long getAccountId() {
		return this.accountId;
	}

	public void setAccountId(Long accountId) {
		this.accountId = accountId;
	}
  /*
	@Column(name = "AccountTypeID")
	public String getAccountTypeId() {
		return this.accountTypeId;
	}

	public void setAccountTypeId(String accountTypeId) {
		this.accountTypeId = accountTypeId;
	} */ 

	@Column(name = "AccountName")
	public String getAccountName() {
		return this.accountName;
	}

	public void setAccountName(String accountName) {
		this.accountName = accountName;
	}

	@Column(name = "SalesTeamID")
	public String getSalesTeamId() {
		return this.salesTeamId;
	}

	public void setSalesTeamId(String salesTeamId) {
		this.salesTeamId = salesTeamId;
	}
	
	@Column(name = "AccountContactReferred")
	public String getAccountContactReferred() {
		return this.accountContactReferred;
	}

	public void setAccountContactReferred(String accountContactReferred) {
		this.accountContactReferred = accountContactReferred;
	}

	//@Column(name = "AccountPID")
	public String getAccountPId() {
		return this.accountPId;
	}

	public void setAccountPId(String accountPId) {
		this.accountPId = accountPId;
	}
    /*
	@Column(name = "AccountStatus")
	public String getAccountStatus() {
		return this.accountStatus;
	}

	public void setAccountStatus(String accountStatus) {
		this.accountStatus = accountStatus;
	} */ 

	@Column(name = "AccountRating")
	public String getAccountRating() {
		return this.accountRating;
	}

	public void setAccountRating(String accountRating) {
		this.accountRating = accountRating;
	}

	@Column(name = "AccountNumber")
	public String getAccountNumber() {
		return this.accountNumber;
	}

	public void setAccountNumber(String accountNumber) {
		this.accountNumber = accountNumber;
	}

	@Column(name = "AlternateAccountNumber")
	public String getAlternateAccountNumber() {
		return this.alternateAccountNumber;
	}

	public void setAlternateAccountNumber(String alternateAccountNumber) {
		this.alternateAccountNumber = alternateAccountNumber;
	}

	@Column(name = "AccountCreditLimiit", scale = 4)
	public BigDecimal getAccountCreditLimiit() {
		return this.accountCreditLimiit;
	}

	public void setAccountCreditLimiit(BigDecimal accountCreditLimiit) {
		this.accountCreditLimiit = accountCreditLimiit;
	}

	@Column(name = "AccountSource")
	public String getAccountSource() {
		return this.accountSource;
	}

	public void setAccountSource(String accountSource) {
		this.accountSource = accountSource;
	}

	@Column(name = "BankName")
	public String getBankName() {
		return this.bankName;
	}

	public void setBankName(String bankName) {
		this.bankName = bankName;
	}

	@Column(name = "BankAccountName")
	public String getBankAccountName() {
		return this.bankAccountName;
	}

	public void setBankAccountName(String bankAccountName) {
		this.bankAccountName = bankAccountName;
	}

	@Column(name = "BankAccountSortCode")
	public String getBankAccountSortCode() {
		return this.bankAccountSortCode;
	}

	public void setBankAccountSortCode(String bankAccountSortCode) {
		this.bankAccountSortCode = bankAccountSortCode;
	}

	@Column(name = "BankAccountNumber")
	public String getBankAccountNumber() {
		return this.bankAccountNumber;
	}

	public void setBankAccountNumber(String bankAccountNumber) {
		this.bankAccountNumber = bankAccountNumber;
	}

	@Column(name = "BankAddress1")
	public String getBankAddress1() {
		return this.bankAddress1;
	}

	public void setBankAddress1(String bankAddress1) {
		this.bankAddress1 = bankAddress1;
	}

	@Column(name = "BankAddress2")
	public String getBankAddress2() {
		return this.bankAddress2;
	}

	public void setBankAddress2(String bankAddress2) {
		this.bankAddress2 = bankAddress2;
	}

	@Column(name = "BankAddress3")
	public String getBankAddress3() {
		return this.bankAddress3;
	}

	public void setBankAddress3(String bankAddress3) {
		this.bankAddress3 = bankAddress3;
	}

	@Column(name = "BankPostCode")
	public String getBankPostCode() {
		return this.bankPostCode;
	}

	public void setBankPostCode(String bankPostCode) {
		this.bankPostCode = bankPostCode;
	}

	
	
	/*@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "SalesTeamID")
	public ContactGroup getSalesTeam() {
		return this.salesTeam;
	}

	public void setSalesTeam(ContactGroup salesTeam) {
		this.salesTeam = salesTeam;
	}*/

	/*@Column(name = "SalesRepID")
	public Long getSalesRepId() {
		return this.salesRepId;
	}

	public void setSalesRepId(Long salesRepId) {
		this.salesRepId = salesRepId;
	}*/
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "SalesRepID")
	public Contact getContact() {
		return this.contact;
	}

	public void setContact(Contact contact) {
		this.contact = contact;
	}
	
	@Column(name = "Position")
	public String getPosition() {
		return this.position;
	}

	public void setPosition(String position) {
		this.position = position;
	}
//	@JsonIgnore
	@JsonBackReference
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "PrimaryContactName")
	public Contact getContactByPrimaryContactName() {
		return this.contactByPrimaryContactName;
	}

	public void setContactByPrimaryContactName(
			Contact contactByPrimaryContactName) {
		this.contactByPrimaryContactName = contactByPrimaryContactName;
	}

	@Column(name = "PrimaryTelephoneNumber")
	public String getPrimaryTelephoneNumber() {
		return this.primaryTelephoneNumber;
	}

	public void setPrimaryTelephoneNumber(String primaryTelephoneNumber) {
		this.primaryTelephoneNumber = primaryTelephoneNumber;
	}

	@Column(name = "PrimaryEmailID")
	public String getPrimaryEmailId() {
		return this.primaryEmailId;
	}

	public void setPrimaryEmailId(String primaryEmailId) {
		this.primaryEmailId = primaryEmailId;
	}

	@Column(name = "BillingContactName")
	public String getBillingContactName() {
		return this.billingContactName;
	}

	public void setBillingContactName(String billingContactName) {
		this.billingContactName = billingContactName;
	}

	@Column(name = "BillingTelephoneNumber")
	public String getBillingTelephoneNumber() {
		return this.billingTelephoneNumber;
	}

	public void setBillingTelephoneNumber(String billingTelephoneNumber) {
		this.billingTelephoneNumber = billingTelephoneNumber;
	}

	@Column(name = "BillingContactEmailID")
	public String getBillingContactEmailId() {
		return this.billingContactEmailId;
	}

	public void setBillingContactEmailId(String billingContactEmailId) {
		this.billingContactEmailId = billingContactEmailId;
	}

	@Column(name = "BillingName")
	public String getBillingName() {
		return this.billingName;
	}

	public void setBillingName(String billingName) {
		this.billingName = billingName;
	}

	@Column(name = "BillingAddress1")
	public String getBillingAddress1() {
		return this.billingAddress1;
	}

	public void setBillingAddress1(String billingAddress1) {
		this.billingAddress1 = billingAddress1;
	}

	@Column(name = "BillingAddress2")
	public String getBillingAddress2() {
		return this.billingAddress2;
	}

	public void setBillingAddress2(String billingAddress2) {
		this.billingAddress2 = billingAddress2;
	}

	@Column(name = "BillingAddress3")
	public String getBillingAddress3() {
		return this.billingAddress3;
	}

	public void setBillingAddress3(String billingAddress3) {
		this.billingAddress3 = billingAddress3;
	}

	@Column(name = "BillingPostCode")
	public String getBillingPostCode() {
		return this.billingPostCode;
	}

	public void setBillingPostCode(String billingPostCode) {
		this.billingPostCode = billingPostCode;
	}

	@Column(name = "CompanyAddress1")
	public String getCompanyAddress1() {
		return this.companyAddress1;
	}

	public void setCompanyAddress1(String companyAddress1) {
		this.companyAddress1 = companyAddress1;
	}

	@Column(name = "CompanyAddress2")
	public String getCompanyAddress2() {
		return this.companyAddress2;
	}

	public void setCompanyAddress2(String companyAddress2) {
		this.companyAddress2 = companyAddress2;
	}

	@Column(name = "CompanyAddress3")
	public String getCompanyAddress3() {
		return this.companyAddress3;
	}

	public void setCompanyAddress3(String companyAddress3) {
		this.companyAddress3 = companyAddress3;
	}

	@Column(name = "CompanyPostCode")
	public String getCompanyPostCode() {
		return this.companyPostCode;
	}

	public void setCompanyPostCode(String companyPostCode) {
		this.companyPostCode = companyPostCode;
	}

	@Column(name = "ownership")
	public String getOwnership() {
		return this.ownership;
	}

	public void setOwnership(String ownership) {
		this.ownership = ownership;
	}

	@Column(name = "Telephone")
	public String getTelephone() {
		return this.telephone;
	}

	public void setTelephone(String telephone) {
		this.telephone = telephone;
	}

	@Column(name = "OtherPhone")
	public String getOtherPhone() {
		return this.otherPhone;
	}

	public void setOtherPhone(String otherPhone) {
		this.otherPhone = otherPhone;
	}

	@Column(name = "EmailID")
	public String getEmailId() {
		return this.emailId;
	}

	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}

	@Column(name = "AlternateEmailID")
	public String getAlternateEmailId() {
		return this.alternateEmailId;
	}

	public void setAlternateEmailId(String alternateEmailId) {
		this.alternateEmailId = alternateEmailId;
	}

	@Column(name = "Image")
	public String getImage() {
		return this.image;
	}

	public void setImage(String image) {
		this.image = image;
	}

	@Column(name = "WebSite")
	public String getWebSite() {
		return this.webSite;
	}

	public void setWebSite(String webSite) {
		this.webSite = webSite;
	}

	@Column(name = "IsActive")
	public Boolean getIsActive() {
		return this.isActive;
	}

	public void setIsActive(Boolean isActive) {
		this.isActive = isActive;
	}

	@Column(name = "CreatedBy")
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CreatedAt", length = 23)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Column(name = "ModifiedBy")
	public String getModifiedBy() {
		return this.modifiedBy;
	}

	public void setModifiedBy(String modifiedBy) {
		this.modifiedBy = modifiedBy;
	}
    
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ModifiedAt" ,length = 23)
	public Date getModifiedAt() {
		return this.modifiedAt;
	}

	public void setModifiedAt(Date modifiedAt) {
		this.modifiedAt = modifiedAt;
	}

	@Column(name = "Remarks")
	public String getRemarks() {
		return this.remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	
	@Column(name = "AccountRevenue")
	public String getRevenue() {
		return revenue;
	}
	public void setRevenue(String revenue) {
		this.revenue = revenue;
	}
	@Column(name = "AccountDiscount")
	public Float getDiscount() {
		return discount;
	}

	public void setDiscount(Float discount) {
		this.discount = discount;
	}
	@Column(name = "StockExchange")
	public String getStockExchange() {
		return stockExchange;
	}
	public void setStockExchange(String stockExchange) {
		this.stockExchange = stockExchange;
	}
	
	@Column(name = "Ticker")
	public String getTicker() {
		return ticker;
	}
	public void setTicker(String ticker) {
		this.ticker = ticker;
	}
    
	@Column(name = "DoNotCall")
	public Boolean getDoNotCall() {
		return doNotCall;
	}
	public void setDoNotCall(Boolean doNotCall) {
		this.doNotCall = doNotCall;
	}
    
	@Column(name = "DoNotEmail")
	public Boolean getDoNoTEmail() {
		return doNoTEmail;
	}
	public void setDoNoTEmail(Boolean doNoTEmail) {
		this.doNoTEmail = doNoTEmail;
	}
	
	@Column(name = "DoNotSMS")
	public Boolean getDoNotSms() {
		return doNotSms;
	}
	public void setDoNotSms(Boolean doNotSms) {
		this.doNotSms = doNotSms;
	}
	

	@JsonBackReference
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "account")
	public Set<SalesOrder> getSalesOrders() {
		return this.salesOrders;
	}

	public void setSalesOrders(Set<SalesOrder> salesOrders) {
		this.salesOrders = salesOrders;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "AccountSourceID")
	public ListValues getListValuesByAccountSourceId() {
		return this.listValuesByAccountSourceId;
	}

	public void setListValuesByAccountSourceId(
			ListValues listValuesByAccountSourceId) {
		this.listValuesByAccountSourceId = listValuesByAccountSourceId;
	}
	 
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "AccountTypeID")
	public ListValues getListValuesByAccountTypeId() {
		return listValuesByAccountTypeId;
	}

	public void setListValuesByAccountTypeId(ListValues listValuesByAccountTypeId) {
		this.listValuesByAccountTypeId = listValuesByAccountTypeId;
	} 
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "IndustryTypeID")
	public ListValues getListValuesByIndustryTypeId() {
		return listValuesByIndustryTypeId;
	}

	public void setListValuesByIndustryTypeId(ListValues listValuesByIndustryTypeId) {
		this.listValuesByIndustryTypeId = listValuesByIndustryTypeId;
	}
	
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "AccountStatus")
	public ListValues getListValuesByStatusId() {
		return listValuesByStatusId;
	}

	public void setListValuesByStatusId(ListValues listValuesByStatusId) {
		this.listValuesByStatusId = listValuesByStatusId;
	}
	@JsonBackReference
	@OneToMany(fetch = FetchType.LAZY)
	public Set<Lead> getLeads() {
		return this.leads;
	}

	public void setLeads(Set<Lead> leads) {
		this.leads = leads;
	}
	 
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "ContactGroupID")
	public ContactGroup getContactGroup() {
		return contactGroup;
	}
	public void setContactGroup(ContactGroup contactGroup) {
		this.contactGroup = contactGroup;
	}
	
	@Column(name = "AccountRegistrationNumber")
	public String getAccountRegistrationNumber() {
		return this.accountRegistrationNumber;
	}

	public void setAccountRegistrationNumber(String accountRegistrationNumber) {
		this.accountRegistrationNumber = accountRegistrationNumber;
	}
	
	@Column(name = "AccountRegistrationDate", length = 23)
	public java.sql.Date getAccountRegistrationDate() {
		return this.accountRegistrationDate;
	}

	public void setAccountRegistrationDate(java.sql.Date accountRegistrationDate) {
		this.accountRegistrationDate = accountRegistrationDate;
	}

	@Column(name = "AccountNoOfEmployees")
	public Integer getAccountNoOfEmployees() {
		return this.accountNoOfEmployees;
	}

	public void setAccountNoOfEmployees(Integer accountNoOfEmployees) {
		this.accountNoOfEmployees = accountNoOfEmployees;
	}
	
	@Column(name = "AccountLinkedInLink")
	public String getAccountLinkedInLink() {
		return this.accountLinkedInLink;
	}

	public void setAccountLinkedInLink(String accountLinkedInLink) {
		this.accountLinkedInLink = accountLinkedInLink;
	}

	@Column(name = "AccountFaceBookLink")
	public String getAccountFaceBookLink() {
		return this.accountFaceBookLink;
	}
	
	public void setAccountFaceBookLink(String accountFaceBookLink) {
		this.accountFaceBookLink = accountFaceBookLink;
	}

	@Transient
	public String getPrimaryContactName() {
		return primaryContactName;
	}

	public void setPrimaryContactName(String primaryContactName) {
		this.primaryContactName = primaryContactName;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "AccountParentID")
	public Account getParentAccount() {
		return this.parentAccount;
	}

	public void setParentAccount(Account parentAccount) {
		this.parentAccount = parentAccount;
	}
	@Transient
	public Contact getPrimaryContactId() {
		return primaryContactId;
	}

	public void setPrimaryContactId(Contact primaryContactId) {
		this.primaryContactId = primaryContactId;
	}
	
   /*
	@JsonManagedReference
	@ManyToOne(fetch = FetchType.EAGER, targetEntity = Account.class)
	@JoinColumn(name = "AccountID")
	public Account getAccount() {
		return getAccount();
	} 

	public void setAccount(Account account) {
		this.account = account;
	} */ 
	
	/*
	 * @ManyToOne(fetch = FetchType.LAZY)
	 * 
	 * @JoinColumn(name = "AccountTypeID") public ListValues
	 * getListValuesByAccountTypeId() { return this.listValuesByAccountTypeId; }
	 * 
	 * public void setListValuesByAccountTypeId( ListValues
	 * listValuesByAccountTypeId) { this.listValuesByAccountTypeId =
	 * listValuesByAccountTypeId; }
	 */

	/*
	 * @OneToMany(fetch = FetchType.LAZY, mappedBy = "account") public Set
	 * getAccountContacts() { return this.accountContacts; }
	 * 
	 * public void setAccountContacts(Set accountContacts) {
	 * this.accountContacts = accountContacts; }
	 * 
	 * @OneToMany(fetch = FetchType.LAZY, mappedBy = "account") public Set
	 * getAddresses() { return this.addresses; }
	 * 
	 * public void setAddresses(Set addresses) { this.addresses = addresses; }
	 * 
	 * @OneToMany(fetch = FetchType.LAZY, mappedBy = "account") public Set
	 * getInvoices() { return this.invoices; }
	 * 
	 * public void setInvoices(Set invoices) { this.invoices = invoices; }
	 * 
	 * @OneToMany(fetch = FetchType.LAZY, mappedBy = "account") public Set
	 * getOpportunities() { return this.opportunities; }
	 * 
	 * public void setOpportunities(Set opportunities) { this.opportunities =
	 * opportunities; }
	 */
	/*
	 * @JsonBackReference
	 * 
	 * @OneToMany(fetch = FetchType.LAZY) public Set<Contact> getContacts() {
	 * return this.contacts; }
	 * 
	 * public void setContacts(Set<Contact> contacts) { this.contacts =
	 * contacts; }
	 */

}
